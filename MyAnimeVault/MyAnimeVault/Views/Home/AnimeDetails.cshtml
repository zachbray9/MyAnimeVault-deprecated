@using MyAnimeVault.Domain.Models
@model AnimeDetailsViewModel

@{
    ViewData["Title"] = "Anime Details";
}

<div class="text-center">
    <div class="anime-details-container">
        <div class="image-and-rankinginfo-container">
            <img class="anime-details-poster" src="@Model.Anime.Picture?.Large" alt="@Model.Anime.Title" height="400" width="300"/>

            <div class="rankinginfo-container">
                <div class="title-and-season">
                    <h1>
                        @if(Model.Anime.AlternativeTitles != null && !String.IsNullOrEmpty(Model.Anime.AlternativeTitles?.en))
                            @Model.Anime.AlternativeTitles.en
                        else
                            @Model.Anime.Title
                    </h1>

                    <div class="season-and-mediatype-container">
                        @if(Model.Anime.StartSeason != null)
                        {
                            <p class="season">@(char.ToUpper(Model.Anime.StartSeason.Season[0]) + Model.Anime.StartSeason.Season.Substring(1)) @Model.Anime.StartSeason.Year</p>
                            <p class="separator">|</p>
                        }
                        <p class="mediatype">
                            @if(Model.Anime.MediaType.Length < 4)
                                @Model.Anime.MediaType.ToUpper()
                            else
                                @(char.ToUpper(Model.Anime.MediaType[0]) + Model.Anime.MediaType.Substring(1))
                        </p>
                        @if(Model.Anime.Studios.Count > 0)
                        {
                            <p class="separator">|</p>
                            <p class="studio">@Model.Anime.Studios.First().Name</p>
                        }
                    </div>

                </div>

                <div class="ranking-info">
                    @if(Model.Anime.MeanScore != null)
                    {
                        <p class="score"><i class="fa-solid fa-star"></i> @Model.Anime.MeanScore </p>
                    }
                    else
                    {
                        <p class="score"><i class="fa-solid fa-star"></i> No score </p>
                    }
                    <p class="separator">|</p>
                    @if(Model.Anime.Rank != null)
                    {
                        <p class="rank"> Ranked #@Model.Anime.Rank</p>
                    }
                    else
                    {
                        <p class="rank"> Unranked</p>
                    }
                    <p class="separator">|</p>
                    <p class="popularity"> Popularity #@Model.Anime.Popularity</p>
                </div>

                <div class="user-list-details-container">
                    @if(Model.CurrentUser != null)
                    {
                        if(Model.UserAnime != null)
                        {
                            <div class="user-list-listitem-properties-container">
                                <select class="user-anime-property-select" id="watchStatus" asp-for="@Model.UserAnime.WatchStatus">
                                    <option value="watching">Watching</option>
                                    <option value="completed">Completed</option>
                                    <option value="plan_to_watch">Plan to Watch</option>
                                    <option value="on_hold">On-Hold</option>
                                    <option value="dropped">Dropped</option>
                                </select>

                                <select class="user-anime-property-select" id="userRating" asp-for="@Model.UserAnime.Rating">
                                    <option value="0">Select</option>
                                    <option value="1">(1) Appalling</option>
                                    <option value="2">(2) Horrible</option>
                                    <option value="3">(3) Very Bad</option>
                                    <option value="4">(4) Bad</option>
                                    <option value="5">(5) Average</option>
                                    <option value="6">(6) Fine</option>
                                    <option value="7">(7) Good</option>
                                    <option value="8">(8) Very Good</option>
                                    <option value="9">(9) Great</option>
                                    <option value="10">(10) Masterpiece</option>
                                </select>

                                <div class="episodes-watched-input-container">
                                    <p class="episodes-watched-input-text">Episodes: </p>
                                    <input class="user-anime-property-input" id="episodesWatched" type="number" min="0" asp-for="@Model.UserAnime.NumEpisodesWatched"/>
                                    @if(Model.UserAnime.TotalEpisodes != 0)
                                    {
                                        <p class="episodes-watched-input-text">/     @Model.UserAnime.TotalEpisodes</p>
                                    }
                                    else
                                    {
                                        <p class="episodes-watched-input-text">/     ??</p>
                                    }
                                </div>

                                <a class="remove-from-list-button" title="Remove from vault" asp-area="" asp-action="RemoveAnimeFromUserList" asp-controller="Home" asp-route-animeId="@Model.Anime.Id" asp-route-userAnimeId="@Model.UserAnime.Id"><i class="fa-solid fa-trash remove-from-list-button-icon"></i></a>
                            </div>

                        }
                        else
                        {
                            <a class="addToList-button" asp-area="" asp-action="AddAnimeToUserList" asp-controller="Home" asp-route-userId="@Model.CurrentUser.Id" asp-route-animeId="@Model.Anime.Id">+ Add To List</a>
                        }
                    }
                </div>

            </div>
        </div>

        <div class="anime-synopsis-container">
            @if(Model.Anime.Synopsis != null)
            {
                <h3>Synopsis</h3>
                <div class="synopsis-lines-container">
                
                    @foreach(var line in Model.Anime.Synopsis.Split('\n'))
                    {
                        <p>@line</p>
                
                    }
                </div>
            }
        </div>

        <div class="opening-and-ending-info-container">
            <div class="openings-list-container song-list-container">
                <h3>Opening Themes</h3>
       
                <ul class="song-list">
                    @if(Model.Anime.OpeningSongs.Any())
                    {
                        @foreach(OpeningSong song in Model.Anime.OpeningSongs)
                        {
                            <li>
                                <p>@song.Text</p>
                            </li>
                        }
                    }
                    else
                    {
                        <li>
                            <p>No openings</p>
                        </li>
                    }
                </ul>
            </div>

            <div class="endings-list-container song-list-container">
                <h3>Ending Themes</h3>
                <ul class="song-list">
                    @if(Model.Anime.EndingSongs.Any())
                    {
                        @foreach(EndingSong song in Model.Anime.EndingSongs)
                        {
                            <li>
                                <p>@song.Text</p>
                            </li>
                        }
                    }
                    else
                    {
                        <li>
                            <p>No endings</p>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script>

        $(document).ready(function () {
            let episodesWatchedDebounceTimer;

            // Event listener for watch status select
            $('#watchStatus').change(function () {
                var newValue = $(this).val(); // Get the newly selected value
                console.log("Selected value for watch status:", newValue);
                updateWatchStatusInDatabase(newValue); // Call function to update the database
            });

            // Event listener for rating select
            $('#userRating').change(function () {
                var newValue = $(this).val(); // Get the newly selected value
                updateRatingOrEpisodesWatchedInDatabase('rating', newValue); // Call function to update the database
            });

            // Event listener for episodes watched
            $('#episodesWatched').on('input', function () {
                clearTimeout(episodesWatchedDebounceTimer);

                episodesWatchedDebounceTimer = setTimeout(function () {
                    var newValue = $('#episodesWatched').val();
                    if(newValue != null)
                    {
                        if ((newValue > -1 && newValue <= @Model.UserAnime?.TotalEpisodes) || (newValue > -1 && @Model.UserAnime?.TotalEpisodes == 0)) {
                            updateRatingOrEpisodesWatchedInDatabase('episodesWatched', newValue);
                        }
                    }
                }, 500);
            });

            //function to update the watch status via ajax
            function updateWatchStatusInDatabase(value) {
                var animeId = @Model.Anime.Id; // Replace with the ID of the anime
                var userId = @Model.CurrentUser?.Id; // Replace with the ID of the user

                // Make an AJAX POST request to update the database
                $.ajax({
                    url: '/Home/UpdateUserAnimeWatchStatus',
                    type: 'POST',
                    data: {
                        userId: userId,
                        animeId: animeId,
                        value: value
                    },
                    success: function (response) {
                        toastr.success("Entry was successfully updated.");
                    },
                    error: function (error) {
                        console.log('Error:', error);
                        toastr.error("Entry could not be updated. Please try again.")
                    }
                });
            }

            // Function to update the rating or episodes watched via AJAX
            function updateRatingOrEpisodesWatchedInDatabase(fieldName, value) {
                var animeId = @Model.Anime.Id; // Replace with the ID of the anime
                var userId = @Model.CurrentUser?.Id; // Replace with the ID of the user

                // Make an AJAX POST request to update the database
                $.ajax({
                    url: '/Home/UpdateUserAnimeRatingOrEpisodesWatched',
                    type: 'POST',
                    data: {
                        userId: userId,
                        animeId: animeId,
                        fieldName: fieldName,
                        value: value
                    },
                    success: function (response) {
                        toastr.success("Entry was successfully updated");
                    },
                    error: function (error) {
                        console.log('Error:', error);
                        toastr.error("Entry could not be updated. Please try again.")
                    }
                });
            }

        });
    </script>

}


